<?php
/*
Plugin Name: Sass Compiler
Plugin URI: http://webmaestro.fr/sass-compiler-wordpress/
Author: Etienne Baudry
Author URI: http://webmaestro.fr
Description: Sass Compiler for Wordpress. Enqueue .scss, edit variables from dashboard, compile if modifications occured.
Version: 1.2
License: GNU General Public License
License URI: license.txt
Text Domain: wm-sass
GitHub Plugin URI: https://github.com/WebMaestroFr/wm-sass-compiler
GitHub Branch: master
*/

if ( ! class_exists( 'WM_Sass' ) ) {

function sass_set( $variable, $value = null ) {
	// Set a Sass variable value
	WM_Sass::set_variable( sanitize_key( $variable ), $value );
}

function sass_get( $variable ) {
	// Return a Sass variable value
	return WM_Sass::get_variables( 'value', sanitize_key( $variable ) );
}

class WM_Sass
{
	private static $variables = null, // Sass variables
		$imports   = array(),         // .scss files to import before stylesheet
		$sources   = array(),         // Registered variables files
		$file      = null,            // Compiled CSS path
		$tag       = null;            // HTML tag generated by WP

	public static function set_variable( $key, $value )
	{
		if ( null === self::$variables ) {
			self::init_variables();
		}
		self::$variables['set'][$key] = self::$variables['value'][$key] = $value;
	}

	public static function get_variables( $property = 'value', $key = null )
	{
		if ( null === self::$variables ) {
			self::init_variables();
		}

		if ( ! isset( self::$variables[$property] ) ) {
			return null;
		}
		if ( null === $key ) {
			return self::$variables[$property];
		}
		if ( ! isset( self::$variables[$property][$key] ) ) {
			return null;
		}
		return self::$variables[$property][$key];
	}

	private static function init_variables()
	{
		self::$variables = array(
			'default' => array(),
			'control' => array(),
			'custom'  => array(),
			'set'     => self::$variables // So set variables are not reinitiated
				? self::$variables['set']
				: array( 'site-url' => site_url() ),
			'option' => array_filter( (array) get_option( 'sass_variables' ) )
		);
		// Parse variables from registered source files
		foreach ( self::$sources as $source ) {
			if ( $lines = file( $source ) ) {
				foreach ( $lines as $line ) {
					// Find variable definitions
					if ( preg_match( '/^\s*\$([a-zA-Z-]+)\s*:\s*(.+)(\s+!\s*default)?\s*;(\s*\/\/\s*(WP_Customize_[a-zA-Z_]+))?\s*$/', $line, $matches ) ) {
						self::$variables['default'][$matches[1]] = $matches[2];
						if ( ! empty( $matches[5] ) ) {
							self::$variables['control'][$matches[1]] = $matches[5];
							if ( $custom = get_theme_mod( $matches[1] ) ) {
								self::$variables['custom'][$matches[1]] = get_theme_mod( $matches[1] );
							}
						}
					}
				}
			}
		}
		self::$variables['recorded'] = array_merge( self::$variables['option'], self::$variables['custom'] );
		self::$variables['value'] = array_merge( self::$variables['default'], self::$variables['recorded'], array_filter( self::$variables['set'] ) );
	}

	public static function init()
	{
		// Configuration
		$defaults = array(
			'variables' => array(),
			'imports'   => array(),
			'cache'     => ABSPATH . 'wp-content/cache',
			'search'    => true
		);
		$config = array_merge( $defaults, array_filter( (array) apply_filters( 'sass_configuration', $defaults ) ) );

		// Validate cache directory
		if ( ! is_dir( $config['cache'] ) && ! mkdir( $config['cache'], 0755 ) ) {
			add_action( 'admin_notices', function () {
				add_settings_error( 'wm-sass', 'cache_not_found', sprintf( __( 'The cache directory <code>%s</code> does not exist and cannot be created. Please create it with <code>0755</code> permissions.', 'wm-sass' ), $config['cache'] ) );
			} );
			return;
		}
		if ( ! is_writable( $config['cache'] ) && ! chmod( $config['cache'], 0755 ) ) {
			add_action( 'admin_notices', function () {
				add_settings_error( 'wm-sass', 'cache_not_writable', sprintf( __( 'The cache directory <code>%s</code> is not writable. Please apply <code>0755</code> permissions to it.', 'wm-sass' ), $config['cache'] ) );
			} );
			return;
		}

		// Set output filename
		self::$file = $config['cache'] . '/wm-sass-' . get_current_blog_id() . '.css';

		// Keep valid files lists only
		self::$sources = self::valid_files( $config['variables'] );
		self::$imports = self::valid_files( $config['imports'] );

		if ( is_admin() ) {
			// Register admin page
			self::create_settings_page( $config['search'] );
		}

		// Filters
		add_filter( 'style_loader_tag', array( __CLASS__, 'style_loader_tag' ), 20, 3 );
		// Actions
		add_action( 'wp_enqueue_scripts', array( __CLASS__, 'enqueue_scripts' ) );
		add_action( 'wp_head', array( __CLASS__, 'print_styles' ) );
		add_action( 'sass_compiler_settings_updated', array( __CLASS__, 'settings_updated' ) );
		add_action( 'customize_register', array( __CLASS__, 'customize_register' ) );
		add_action( 'customize_save_after', array( __CLASS__, 'customize_save_after' ) );
		add_action( 'admin_enqueue_scripts', array( __CLASS__, 'admin_enqueue_scripts' ) );
	}

	private static function valid_file( $path )
	{
		if ( empty( $path ) ) { return null; }
		// Convert URIs to path
		$path = str_replace( trailingslashit( site_url() ), ABSPATH, $path );
		// Convert relative (from template directory) to absolute
		if ( strpos( $path, ABSPATH ) !== 0 ) {
			$path = trailingslashit( get_template_directory() ) . ltrim( $path, '/' );
		}
		// Validate
		if ( ! is_file( $path ) ) {
			add_action( 'admin_notices', function () use ( $path ) {
				add_settings_error( 'wm-sass', 'file_not_found', sprintf( __( 'The file <code>%s</code> cannot be found.', 'wm-sass' ), $path ) );
			} );
		} else if ( ! is_writable( $path ) ) {
			add_action( 'admin_notices', function () use ( $path ) {
				add_settings_error( 'wm-sass', 'file_not_writable', sprintf( __( 'The file <code>%s</code> is not writable.', 'wm-sass' ), $path ) );
			} );
		} else {
			return $path;
		}
		return null;
	}

	// Recursive file validation
	private static function valid_files( $files )
	{
		if ( ! is_array( $files ) ) {
			// Convert to array
			$files = array( (string) $files );
		}
		// Returns an array of valid file paths
		return array_filter( array_map( array( __CLASS__, 'valid_file' ), $files ) );
	}

	private static function create_settings_page( $search )
	{
		if ( ! function_exists( 'create_settings_page' ) ) {
			require_once( plugin_dir_path( __FILE__ ) . 'libs/wm-settings/plugin.php' );
		}
		$page = create_settings_page(
			'sass_compiler',
			__( 'Sass Compiler', 'wm-sass' ),
			array( 'parent' => 'themes.php' ),
			array(
				'sass_compiler' => array( // "Compiler" page
					'title'       => __( 'Stylesheet', 'wm-sass' ),
					'fields' => array(
						'stylesheet' => array(
							'label'       => false,
							'type'        => 'textarea',
							'description' => sprintf( __( 'From this very stylesheet, <strong>@import</strong> urls can be relative to WordPress root (<code>%s</code>) or your theme directory (<code>%s</code>).', 'wm-sass' ), rtrim( ABSPATH, '/' ), get_stylesheet_directory() ),
							'attributes'  => array(
								'placeholder' => esc_attr( __( '/* Sass stylesheet */', 'wm-sass' ) )
							)
						)
					)
				)
			),
			array(
				'description' => '<a href="http://sass-lang.com/guide" target="_blank">' . __( 'Getting started with Sass', 'wm-sass' ) . '</a> | <a href="http://webmaestro.fr/sass-compiler-wordpress/" target="_blank">' . __( 'Configure with PHP', 'wm-sass' ) . '</a>',
				'tabs'        => true,
				// 'submit'      => __( 'Compile', 'wm-sass' ),
				// 'updated'     => true,
				'reset'       => false
			)
		);
		$defaults = self::get_variables( 'default' );
		if ( ! empty( $defaults ) ) {
			// Prepare "Variables" plugin page
			$page->apply_settings( array(
				'sass_variables' => array(
					'title'       => __( 'Variables', 'wm-sass' ),
					'description' => empty( $search ) ? false : '<input type="search" id="variable-search" placeholder="' . __( 'Search Variable', 'wm-sass' ) . '">',
					'fields'      => array_combine( array_keys( $defaults ), array_map( function ( $name, $default ) {
						return array(
							'label' => "\${$name}",
							'attributes' => array( 'placeholder' => esc_attr( $default ) )
						);
					}, array_keys( $defaults ), $defaults ) )
				)
			) );
		} else if ( empty( self::$sources ) ) {
			$page->add_notice( __( 'In order to edit your Sass variables from this page, you must <a href="http://webmaestro.fr/sass-compiler-wordpress/" target="_blank">register your definition file(s)</a>.', 'wm-sass' ) );
		} else {
			$page->add_notice( __( 'No variables were found in the registered definition files.', 'wm-sass' ), 'warning' );
		}
	}

	public static function style_loader_tag( $html, $handle, $href )
	{
		$src = strtok( $href, '?' );
    	if ( preg_match( '/\.scss$/', $src ) ) {
			if ( $file = self::valid_file( $src ) ) {
				self::$imports[] = $file;
			}
			// Do not print Sass styles quite yet
			return '';
		}
		if ( $handle === 'wm-sass' ) {
			// Sort out dependencies
			if ( is_file( self::$file . '.scss' ) ) {
				self::$imports[] = self::$file . '.scss';
			}
			// We'll print this as soon as we're sure the compiled CSS it links to is up to date
			self::$tag = $html;
			return '';
		}
		return $html;
	}

	public static function enqueue_scripts()
	{
		wp_enqueue_style( 'wm-sass', str_replace( ABSPATH, trailingslashit( site_url() ), self::$file ) );
	}

	public static function print_styles()
	{
		if ( current_user_can( 'edit_themes' ) || ! $hash = wp_cache_get( 'wm_sass_hash' ) ) {
			// If user or cache expired, check files version
			$hash = implode( '-', array_map( 'md5_file', array_merge( self::$imports ) ) );
			$hash .= '-' . md5( json_encode( self::get_variables() ) );
			wp_cache_set( 'wm_sass_hash', $hash, 3600 );
		}
		if ( $refresh = ! empty( $GLOBALS['wp_customize'] ) || ! is_file( self::$file ) || $hash !== get_option( 'wm_sass_hash' ) ) {
			// If files are different, compile
			if ( $refresh ) {
				self::init_variables();
			}
			if ( $css = self::get_css( self::$imports ) ) {
				file_put_contents( self::$file, $css );
				update_option( 'wm_sass_hash', $hash );
			}
		}
		echo self::$tag;
	}

	public static function settings_updated()
	{
		foreach ( array_keys( self::get_variables( 'control' ) ) as $name ) {
			set_theme_mod( $name, self::get_variables( 'option', $name ) );
		}
		file_put_contents( self::$file . '.scss', get_setting( 'sass_compiler', 'stylesheet' ) );
		if ( is_file( self::$file ) ) {
			unlink( self::$file );
		}
	}

    public static function customize_register( $wp_customize )
    {
		$wp_customize->add_section( 'wm_sass' , array(
			'title' => __( 'Sass Variables', 'wm-sass' )
		) );
        foreach ( self::get_variables( 'control' ) as $name => $control ) {
        	$wp_customize->add_setting( $name, array(
				'default'   => esc_js( self::get_variables( 'default', $name ) ),
    			'transport' => 'refresh'
			) );
			$wp_customize->add_control( new $control( $wp_customize, $name, array(
				'label'    => "\${$name}",
				'section'  => 'wm_sass',
				'settings' => $name
			) ) );
        }
    }

    public static function customize_save_after()
    {
		update_option( 'sass_variables', self::get_variables( 'recorded' ) );
		if ( is_file( self::$file ) ) {
			unlink( self::$file );
		}
    }

	public static function admin_enqueue_scripts( $hook_suffix )
	{
		if ( 'appearance_page_sass_compiler' === $hook_suffix ) {
			wp_enqueue_script( 'codemirror', plugin_dir_url( __FILE__ ) . 'libs/codemirror/lib/codemirror.js' );
			wp_enqueue_script( 'codemirror-css', plugin_dir_url( __FILE__ ) . 'libs/codemirror/mode/css/css.js', array( 'codemirror' ) );
			wp_enqueue_script( 'codemirror-placeholder', plugin_dir_url( __FILE__ ) . 'libs/codemirror/addon/display/placeholder.js', array( 'codemirror' ) );
			wp_enqueue_script( 'sass-compiler', plugin_dir_url( __FILE__ ) . 'wm-sass-compiler.js', array( 'codemirror' ) );
			wp_enqueue_style( 'codemirror', plugin_dir_url( __FILE__ ) . 'libs/codemirror/lib/codemirror.css' );
			wp_enqueue_style( 'sass-compiler', plugin_dir_url( __FILE__ ) . 'wm-sass-compiler.css' );
		}
	}

	public static function get_css( $files = array() )
	{
		$parser = self::get_parser();
		$code = "/* WM_Sass Compiler */\n";
		foreach ( self::valid_files( $files ) as $file ) {
			$parser->addImportPath( dirname( $file ) );
			$code .= file_get_contents( $file ) . "\n";
		}
		self::blank_sources();
		try {
			$css = $parser->compile( $code );
			add_action( 'admin_notices', function () {
				add_settings_error( 'wm-sass', 'sass_compiled', __( 'Sass successfully compiled.', 'wm-sass' ), 'updated' );
			} );
		} catch ( exception $e ) {
			$css = null;
			add_action( 'admin_notices', function () use ( $e ) {
				add_settings_error( 'wm-sass', $e->getCode(), sprintf( __( 'Compiler result with the following error : <pre>%s</pre>', 'wm-sass' ), $e->getMessage() ) );
			} );
		}
		self::restore_sources();
		return $css;
	}
	private static function get_parser()
	{
		require_once( plugin_dir_path( __FILE__ ) . 'libs/scssphp/scss.inc.php' );
		$parser = new scssc();
		$parser->setImportPaths( array(
			get_stylesheet_directory(),
			get_template_directory(),
			ABSPATH
		) );
		// Set variables
		$parser->setVariables( self::get_variables() );
		$parser->setNumberPrecision( 2 );
		$parser->setFormatter( 'Leafo\ScssPhp\Formatter\Crunched' );
		return $parser;
	}
	private static function blank_sources()
	{
		foreach ( self::$sources as $i => $source ) {
			if ( is_file( $source ) && ! is_file( $source . '.restore.scss' ) && copy( $source, $source . '.restore.scss' ) ) {
				file_put_contents( $source, '' );
			}
		}
	}
	private static function restore_sources()
	{
		foreach ( self::$sources as $i => $source ) {
			if ( is_file( $source . '.restore.scss' ) && file_get_contents( $source ) === '' && copy( $source . '.restore.scss', $source ) ) {
				unlink( $source . '.restore.scss' );
			}
		}
	}
}
add_action( 'init', array( 'WM_Sass', 'init' ) );

}

?>
